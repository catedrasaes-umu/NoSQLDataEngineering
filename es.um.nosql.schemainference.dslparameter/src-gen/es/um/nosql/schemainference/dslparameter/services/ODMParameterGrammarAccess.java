/*
 * generated by Xtext 2.10.0
 */
package es.um.nosql.schemainference.dslparameter.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ODMParameterGrammarAccess extends AbstractGrammarElementFinder {
	
	public class MongooseModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.MongooseModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cODMParametersKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMapperKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMapperAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMapperEStringParserRuleCall_4_0 = (RuleCall)cMapperAssignment_4.eContents().get(0);
		private final Assignment cParametersAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParametersEntityParserRuleCall_5_0 = (RuleCall)cParametersAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MongooseModel:
		//	'ODMParameters'
		//	'{'
		//	'mapper' ":" mapper=EString
		//	parameters+=Entity+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'ODMParameters' '{' 'mapper' ":" mapper=EString parameters+=Entity+ '}'
		public Group getGroup() { return cGroup; }
		
		//'ODMParameters'
		public Keyword getODMParametersKeyword_0() { return cODMParametersKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'mapper'
		public Keyword getMapperKeyword_2() { return cMapperKeyword_2; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//mapper=EString
		public Assignment getMapperAssignment_4() { return cMapperAssignment_4; }
		
		//EString
		public RuleCall getMapperEStringParserRuleCall_4_0() { return cMapperEStringParserRuleCall_4_0; }
		
		//parameters+=Entity+
		public Assignment getParametersAssignment_5() { return cParametersAssignment_5; }
		
		//Entity
		public RuleCall getParametersEntityParserRuleCall_5_0() { return cParametersEntityParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.Entity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEntityParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cDiscriminatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cDiscriminatorDiscriminatorKeyword_1_0 = (Keyword)cDiscriminatorAssignment_1.eContents().get(0);
		private final Keyword cEntityKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cValidatorsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cValidatorsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cValidatorsValidatorParserRuleCall_5_2_0 = (RuleCall)cValidatorsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cValidatorsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cValidatorsValidatorParserRuleCall_5_3_1_0 = (RuleCall)cValidatorsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cUniquesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cUniquesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cUniquesUniqueParserRuleCall_6_2_0 = (RuleCall)cUniquesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cUniquesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cUniquesUniqueParserRuleCall_6_3_1_0 = (RuleCall)cUniquesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cUpdatesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cUpdatesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cUpdatesUpdateParserRuleCall_7_2_0 = (RuleCall)cUpdatesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cUpdatesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cUpdatesUpdateParserRuleCall_7_3_1_0 = (RuleCall)cUpdatesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIndexesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cIndexesAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cIndexesIndexParserRuleCall_8_2_0 = (RuleCall)cIndexesAssignment_8_2.eContents().get(0);
		private final Group cGroup_8_3 = (Group)cGroup_8.eContents().get(3);
		private final Keyword cCommaKeyword_8_3_0 = (Keyword)cGroup_8_3.eContents().get(0);
		private final Assignment cIndexesAssignment_8_3_1 = (Assignment)cGroup_8_3.eContents().get(1);
		private final RuleCall cIndexesIndexParserRuleCall_8_3_1_0 = (RuleCall)cIndexesAssignment_8_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_4 = (Keyword)cGroup_8.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Entity EntityParameter:
		//	{EntityParameter} discriminator?='discriminator'?
		//	'Entity'
		//	name=EString
		//	'{' ('validators' '{' validators+=Validator ("," validators+=Validator)* '}')? ('uniques' '{' uniques+=Unique (","
		//	uniques+=Unique)* '}')? ('updates' '{' updates+=Update ("," updates+=Update)* '}')? ('indexes' '{' indexes+=Index (","
		//	indexes+=Index)* '}')?
		//	'}'
		@Override public ParserRule getRule() { return rule; }
		
		//{EntityParameter} discriminator?='discriminator'? 'Entity' name=EString '{' ('validators' '{' validators+=Validator (","
		//validators+=Validator)* '}')? ('uniques' '{' uniques+=Unique ("," uniques+=Unique)* '}')? ('updates' '{'
		//updates+=Update ("," updates+=Update)* '}')? ('indexes' '{' indexes+=Index ("," indexes+=Index)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{EntityParameter}
		public Action getEntityParameterAction_0() { return cEntityParameterAction_0; }
		
		//discriminator?='discriminator'?
		public Assignment getDiscriminatorAssignment_1() { return cDiscriminatorAssignment_1; }
		
		//'discriminator'
		public Keyword getDiscriminatorDiscriminatorKeyword_1_0() { return cDiscriminatorDiscriminatorKeyword_1_0; }
		
		//'Entity'
		public Keyword getEntityKeyword_2() { return cEntityKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('validators' '{' validators+=Validator ("," validators+=Validator)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'validators'
		public Keyword getValidatorsKeyword_5_0() { return cValidatorsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//validators+=Validator
		public Assignment getValidatorsAssignment_5_2() { return cValidatorsAssignment_5_2; }
		
		//Validator
		public RuleCall getValidatorsValidatorParserRuleCall_5_2_0() { return cValidatorsValidatorParserRuleCall_5_2_0; }
		
		//("," validators+=Validator)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//validators+=Validator
		public Assignment getValidatorsAssignment_5_3_1() { return cValidatorsAssignment_5_3_1; }
		
		//Validator
		public RuleCall getValidatorsValidatorParserRuleCall_5_3_1_0() { return cValidatorsValidatorParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('uniques' '{' uniques+=Unique ("," uniques+=Unique)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'uniques'
		public Keyword getUniquesKeyword_6_0() { return cUniquesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//uniques+=Unique
		public Assignment getUniquesAssignment_6_2() { return cUniquesAssignment_6_2; }
		
		//Unique
		public RuleCall getUniquesUniqueParserRuleCall_6_2_0() { return cUniquesUniqueParserRuleCall_6_2_0; }
		
		//("," uniques+=Unique)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//uniques+=Unique
		public Assignment getUniquesAssignment_6_3_1() { return cUniquesAssignment_6_3_1; }
		
		//Unique
		public RuleCall getUniquesUniqueParserRuleCall_6_3_1_0() { return cUniquesUniqueParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('updates' '{' updates+=Update ("," updates+=Update)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'updates'
		public Keyword getUpdatesKeyword_7_0() { return cUpdatesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//updates+=Update
		public Assignment getUpdatesAssignment_7_2() { return cUpdatesAssignment_7_2; }
		
		//Update
		public RuleCall getUpdatesUpdateParserRuleCall_7_2_0() { return cUpdatesUpdateParserRuleCall_7_2_0; }
		
		//("," updates+=Update)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//updates+=Update
		public Assignment getUpdatesAssignment_7_3_1() { return cUpdatesAssignment_7_3_1; }
		
		//Update
		public RuleCall getUpdatesUpdateParserRuleCall_7_3_1_0() { return cUpdatesUpdateParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//('indexes' '{' indexes+=Index ("," indexes+=Index)* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'indexes'
		public Keyword getIndexesKeyword_8_0() { return cIndexesKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//indexes+=Index
		public Assignment getIndexesAssignment_8_2() { return cIndexesAssignment_8_2; }
		
		//Index
		public RuleCall getIndexesIndexParserRuleCall_8_2_0() { return cIndexesIndexParserRuleCall_8_2_0; }
		
		//("," indexes+=Index)*
		public Group getGroup_8_3() { return cGroup_8_3; }
		
		//","
		public Keyword getCommaKeyword_8_3_0() { return cCommaKeyword_8_3_0; }
		
		//indexes+=Index
		public Assignment getIndexesAssignment_8_3_1() { return cIndexesAssignment_8_3_1; }
		
		//Index
		public RuleCall getIndexesIndexParserRuleCall_8_3_1_0() { return cIndexesIndexParserRuleCall_8_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_4() { return cRightCurlyBracketKeyword_8_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.Validator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cValidatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFieldNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFieldNameEStringParserRuleCall_2_0 = (RuleCall)cFieldNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValidatorNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cValidatorNameEStringParserRuleCall_4_0 = (RuleCall)cValidatorNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Validator:
		//	{Validator}
		//	'('
		//	fieldName=EString ":"
		//	ValidatorName=EString?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Validator} '(' fieldName=EString ":" ValidatorName=EString? ')'
		public Group getGroup() { return cGroup; }
		
		//{Validator}
		public Action getValidatorAction_0() { return cValidatorAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//fieldName=EString
		public Assignment getFieldNameAssignment_2() { return cFieldNameAssignment_2; }
		
		//EString
		public RuleCall getFieldNameEStringParserRuleCall_2_0() { return cFieldNameEStringParserRuleCall_2_0; }
		
		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//ValidatorName=EString?
		public Assignment getValidatorNameAssignment_4() { return cValidatorNameAssignment_4; }
		
		//EString
		public RuleCall getValidatorNameEStringParserRuleCall_4_0() { return cValidatorNameEStringParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class UniqueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.Unique");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUniqueAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameEStringParserRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		
		//Unique:
		//	{Unique} fieldName=EString?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Unique} fieldName=EString?
		public Group getGroup() { return cGroup; }
		
		//{Unique}
		public Action getUniqueAction_0() { return cUniqueAction_0; }
		
		//fieldName=EString?
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//EString
		public RuleCall getFieldNameEStringParserRuleCall_1_0() { return cFieldNameEStringParserRuleCall_1_0; }
	}
	public class UpdateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.Update");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cUpdateAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameEStringParserRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		
		//Update:
		//	{Update} fieldName=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Update} fieldName=EString
		public Group getGroup() { return cGroup; }
		
		//{Update}
		public Action getUpdateAction_0() { return cUpdateAction_0; }
		
		//fieldName=EString
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//EString
		public RuleCall getFieldNameEStringParserRuleCall_1_0() { return cFieldNameEStringParserRuleCall_1_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class IndexElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.Index");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIndexAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cFieldNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFieldNameEStringParserRuleCall_1_0 = (RuleCall)cFieldNameAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cKindKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cKindAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cKindIndexKindEnumRuleCall_3_1_0 = (RuleCall)cKindAssignment_3_1.eContents().get(0);
		
		//Index:
		//	{Index} fieldName=EString? "->" ('kind:' kind=IndexKind)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Index} fieldName=EString? "->" ('kind:' kind=IndexKind)?
		public Group getGroup() { return cGroup; }
		
		//{Index}
		public Action getIndexAction_0() { return cIndexAction_0; }
		
		//fieldName=EString?
		public Assignment getFieldNameAssignment_1() { return cFieldNameAssignment_1; }
		
		//EString
		public RuleCall getFieldNameEStringParserRuleCall_1_0() { return cFieldNameEStringParserRuleCall_1_0; }
		
		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_2() { return cHyphenMinusGreaterThanSignKeyword_2; }
		
		//('kind:' kind=IndexKind)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'kind:'
		public Keyword getKindKeyword_3_0() { return cKindKeyword_3_0; }
		
		//kind=IndexKind
		public Assignment getKindAssignment_3_1() { return cKindAssignment_3_1; }
		
		//IndexKind
		public RuleCall getKindIndexKindEnumRuleCall_3_1_0() { return cKindIndexKindEnumRuleCall_3_1_0; }
	}
	
	public class IndexKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "es.um.nosql.schemainference.dslparameter.ODMParameter.IndexKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSortedEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSortedSortedKeyword_0_0 = (Keyword)cSortedEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHashedEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHashedHashedKeyword_1_0 = (Keyword)cHashedEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IndexKind:
		//	Sorted | Hashed;
		public EnumRule getRule() { return rule; }
		
		//Sorted | Hashed
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sorted
		public EnumLiteralDeclaration getSortedEnumLiteralDeclaration_0() { return cSortedEnumLiteralDeclaration_0; }
		
		//'Sorted'
		public Keyword getSortedSortedKeyword_0_0() { return cSortedSortedKeyword_0_0; }
		
		//Hashed
		public EnumLiteralDeclaration getHashedEnumLiteralDeclaration_1() { return cHashedEnumLiteralDeclaration_1; }
		
		//'Hashed'
		public Keyword getHashedHashedKeyword_1_0() { return cHashedHashedKeyword_1_0; }
	}
	
	private final MongooseModelElements pMongooseModel;
	private final EntityElements pEntity;
	private final EStringElements pEString;
	private final ValidatorElements pValidator;
	private final UniqueElements pUnique;
	private final UpdateElements pUpdate;
	private final EBooleanElements pEBoolean;
	private final IndexElements pIndex;
	private final IndexKindElements eIndexKind;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ODMParameterGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pMongooseModel = new MongooseModelElements();
		this.pEntity = new EntityElements();
		this.pEString = new EStringElements();
		this.pValidator = new ValidatorElements();
		this.pUnique = new UniqueElements();
		this.pUpdate = new UpdateElements();
		this.pEBoolean = new EBooleanElements();
		this.pIndex = new IndexElements();
		this.eIndexKind = new IndexKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("es.um.nosql.schemainference.dslparameter.ODMParameter".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//MongooseModel:
	//	'ODMParameters'
	//	'{'
	//	'mapper' ":" mapper=EString
	//	parameters+=Entity+ '}';
	public MongooseModelElements getMongooseModelAccess() {
		return pMongooseModel;
	}
	
	public ParserRule getMongooseModelRule() {
		return getMongooseModelAccess().getRule();
	}
	
	//Entity EntityParameter:
	//	{EntityParameter} discriminator?='discriminator'?
	//	'Entity'
	//	name=EString
	//	'{' ('validators' '{' validators+=Validator ("," validators+=Validator)* '}')? ('uniques' '{' uniques+=Unique (","
	//	uniques+=Unique)* '}')? ('updates' '{' updates+=Update ("," updates+=Update)* '}')? ('indexes' '{' indexes+=Index (","
	//	indexes+=Index)* '}')?
	//	'}'
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Validator:
	//	{Validator}
	//	'('
	//	fieldName=EString ":"
	//	ValidatorName=EString?
	//	')';
	public ValidatorElements getValidatorAccess() {
		return pValidator;
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}
	
	//Unique:
	//	{Unique} fieldName=EString?;
	public UniqueElements getUniqueAccess() {
		return pUnique;
	}
	
	public ParserRule getUniqueRule() {
		return getUniqueAccess().getRule();
	}
	
	//Update:
	//	{Update} fieldName=EString;
	public UpdateElements getUpdateAccess() {
		return pUpdate;
	}
	
	public ParserRule getUpdateRule() {
		return getUpdateAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Index:
	//	{Index} fieldName=EString? "->" ('kind:' kind=IndexKind)?;
	public IndexElements getIndexAccess() {
		return pIndex;
	}
	
	public ParserRule getIndexRule() {
		return getIndexAccess().getRule();
	}
	
	//enum IndexKind:
	//	Sorted | Hashed;
	public IndexKindElements getIndexKindAccess() {
		return eIndexKind;
	}
	
	public EnumRule getIndexKindRule() {
		return getIndexKindAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
