/*
 * generated by Xtext 2.10.0
 */
package es.um.nosql.schemainference.dslparameter.serializer;

import com.google.inject.Inject;
import es.um.nosql.schemainference.dsl4mongoose.Dsl4mongoosePackage;
import es.um.nosql.schemainference.dsl4mongoose.EntityParameter;
import es.um.nosql.schemainference.dsl4mongoose.Index;
import es.um.nosql.schemainference.dsl4mongoose.MongooseModel;
import es.um.nosql.schemainference.dsl4mongoose.Unique;
import es.um.nosql.schemainference.dsl4mongoose.Update;
import es.um.nosql.schemainference.dsl4mongoose.Validator;
import es.um.nosql.schemainference.dslparameter.services.ODMParameterGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ODMParameterSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ODMParameterGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == Dsl4mongoosePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case Dsl4mongoosePackage.ENTITY_PARAMETER:
				sequence_Entity(context, (EntityParameter) semanticObject); 
				return; 
			case Dsl4mongoosePackage.INDEX:
				sequence_Index(context, (Index) semanticObject); 
				return; 
			case Dsl4mongoosePackage.MONGOOSE_MODEL:
				sequence_MongooseModel(context, (MongooseModel) semanticObject); 
				return; 
			case Dsl4mongoosePackage.UNIQUE:
				sequence_Unique(context, (Unique) semanticObject); 
				return; 
			case Dsl4mongoosePackage.UPDATE:
				sequence_Update(context, (Update) semanticObject); 
				return; 
			case Dsl4mongoosePackage.VALIDATOR:
				sequence_Validator(context, (Validator) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Entity returns EntityParameter
	 *
	 * Constraint:
	 *     (
	 *         discriminator?='discriminator'? 
	 *         name=EString 
	 *         (validators+=Validator validators+=Validator*)? 
	 *         (uniques+=Unique uniques+=Unique*)? 
	 *         (updates+=Update updates+=Update*)? 
	 *         (indexes+=Index indexes+=Index*)?
	 *     )
	 */
	protected void sequence_Entity(ISerializationContext context, EntityParameter semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Index returns Index
	 *
	 * Constraint:
	 *     (fieldName=EString? kind=IndexKind?)
	 */
	protected void sequence_Index(ISerializationContext context, Index semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     MongooseModel returns MongooseModel
	 *
	 * Constraint:
	 *     (mapper=EString parameters+=Entity+)
	 */
	protected void sequence_MongooseModel(ISerializationContext context, MongooseModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Unique returns Unique
	 *
	 * Constraint:
	 *     fieldName=EString?
	 */
	protected void sequence_Unique(ISerializationContext context, Unique semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Update returns Update
	 *
	 * Constraint:
	 *     fieldName=EString
	 */
	protected void sequence_Update(ISerializationContext context, Update semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, Dsl4mongoosePackage.Literals.FIELD_PARAMETER__FIELD_NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, Dsl4mongoosePackage.Literals.FIELD_PARAMETER__FIELD_NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getUpdateAccess().getFieldNameEStringParserRuleCall_1_0(), semanticObject.getFieldName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Validator returns Validator
	 *
	 * Constraint:
	 *     (fieldName=EString ValidatorName=EString?)
	 */
	protected void sequence_Validator(ISerializationContext context, Validator semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
