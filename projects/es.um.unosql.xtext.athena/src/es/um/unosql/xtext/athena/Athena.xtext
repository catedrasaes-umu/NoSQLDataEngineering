grammar es.um.unosql.xtext.athena.Athena with org.eclipse.xtext.common.Terminals

generate athena "http://www.um.es/unosql/xtext/athena/Athena"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

AthenaSchema returns AthenaSchema:
  'Schema' name=ValidId (version=VersionId)?
  ( 'import' imports+=Import )*
  ( featureSets+=FeatureSetDecl | entities+=EntityDecl | relationships+=RelationshipDecl )*
;

Import:
  importedNamespace=[AthenaSchema|QualifiedImport]
;

TopLevelStructureDefiningElementDecl:
  SchemaTypeDecl | FeatureSetDecl
;

FeatureSetDecl:
  'fset' name=ValidId
  structure=StructureExpr
;

SchemaTypeDecl:
  EntityDecl | RelationshipDecl
;

EntityDecl:
  ShortEntityDecl | RegularEntityDecl
;

// We removed { } to make it consistent with common=CommonSpec?
ShortEntityDecl:
  ( root?='root' )? 'entity' name=ValidId ( '::' parents+=[SchemaTypeDecl] ( ',' parents+=[SchemaTypeDecl] )* )?
    structure=StructureExpr
;

RegularEntityDecl:
  ( root?='root' )? 'entity' name=ValidId ( '::' parents+=[SchemaTypeDecl] ( ',' parents+=[SchemaTypeDecl] )* )?
  '{'
    common=CommonSpec?
    variations+=VariationDecl+
  '}'
;

RelationshipDecl:
  ShortRelationshipDecl | RegularRelationshipDecl
;

ShortRelationshipDecl:
  'relationship' name=ValidId ( '::' parents+=[SchemaTypeDecl] ( ',' parents+=[SchemaTypeDecl] )* )?
    structure=StructureExpr
;

RegularRelationshipDecl:
  'relationship' name=ValidId ( '::' parents+=[SchemaTypeDecl] ( ',' parents+=[SchemaTypeDecl] )* )?
  '{'
    common=CommonSpec?
    variations+=VariationDecl+
  '}'
;

CommonSpec:
  'common' structure=StructureExpr
;

VariationDecl:
  'variation' name=VariationIdSpec
  structure=StructureExpr?
;

StructureExpr returns StructureExpr:
  StructureTerm ( {StructureExpr.left=current} operator=( 'U' | '+' | '-' ) right=StructureTerm )*
;

StructureTerm returns StructureExpr:
  StructurePrimary ( {StructureTerm.left=current} operator='I' right=StructurePrimary )*
;

StructurePrimary returns StructureExpr:
  StructureLiteral | TopLevelStructureDefiningElementDeclRef  | VariationDeclRef | SQLStructure | '(' StructureExpr ')'
;

StructureLiteral:
  '{' spec=FeatureSet '}'
;

TopLevelStructureDefiningElementDeclRef:
  ref=[TopLevelStructureDefiningElementDecl|QualifiedTopLevelStructureDefiningElementName]
;

VariationDeclRef:
  ref=[VariationDecl|QualifiedVariationName]
;

FeatureSet: 
  features+=Feature ( ',' features+=Feature )*
;

Feature:
  ComposedReference | SimpleFeature
;

ComposedReference:
  '(' names+=ValidId ( ',' names+=ValidId )* ')' ':' target=ComposedReferenceTarget
;

SimpleFeature:
  ( key?='+' | ( ( optional?='?' )? ( unique?='!' )? ) ) name=ValidId ( ':' type=Type )?
;

Type:
  DataType | SimpleReferenceTarget | SimpleAggregationTarget | InnerStructureLiteralArray | InnerStructureLiteral
;

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////TYPE HIERARCHY///////////////////////////////////////////////////////////////////

InnerStructureLiteralArray:
  '['
    structure+=InnerStructureLiteral ( ',' structure+=InnerStructureLiteral )*
  ']'
;

InnerStructureLiteral:
  '{' spec=FeatureSet '}'
;

SimpleReferenceTarget:
  'ref' '<' ref=[EntityDecl|QualifiedEntityName] ('as' type=PrimitiveType)?
    ('feat' ( featuredBy+=[RelationshipDecl|QualifiedRelationshipName] |
            ( featuredBy+=[VariationDecl|QualifiedVariationName] ( ',' featuredBy+=[VariationDecl|QualifiedVariationName] )* ))
    )?
    '>' ( multiplicity=('*'|'+') )?
;

ComposedReferenceTarget:
  'ref' '<' ref=[EntityDecl|QualifiedEntityName] '>'
;

SimpleAggregationTarget:
  'aggr' '<' ( aggr+=[SchemaTypeDecl|QualifiedEntityName] |
             ( aggr+=[VariationDecl|QualifiedVariationName] ( ',' aggr+=[VariationDecl|QualifiedVariationName] )* )) '>' ( multiplicity=('*'|'+') )?
;

DataType:
  Null | PrimitiveType | List | Set | Map | Tuple
;

Null returns Null:
  {Null}
  'Null'
;

PrimitiveType:
  SinglePrimitiveType | OptionPrimitiveType
;

OptionPrimitiveType:
  'Option' '<' options+=SinglePrimitiveType ( ',' options+=SinglePrimitiveType )* '>'
;

List returns List:
  {List}
  'List' ( '<' elementType=DataType '>' )?
;

Set returns Set:
  {Set}
  'Set' ( '<' elementType=DataType '>' )?
;

Map returns Map:
  {Map}
  'Map' ( '<' ( keyType=PrimitiveType )? ',' ( valueType=DataType )? '>' )?
;

Tuple returns Tuple:
  {Tuple}
  'Tuple' ( '<' elements+=DataType ( ',' elements+=DataType )* '>' )?
;

//////////////END TYPE HIERARCHY//////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
/////////QUALIFIED NAMES AND PRIMITIVES///////////////////////////////////////////////////////////

QualifiedImport:
  ValidId ( '.' ValidId )* '.*'?
;

QualifiedTopLevelStructureDefiningElementName:
  ValidId ( '.' ValidId )*
;

QualifiedEntityName:
  ValidId ( '.' ValidId )*
;

QualifiedRelationshipName:
  ValidId ( '.' ValidId )*
;

QualifiedVariationName:
  QualifiedTopLevelStructureDefiningElementName '.' VariationIdSpec
;

VariationIdSpec:
  INT
;

SinglePrimitiveType:
  UnrestrictedPrimitiveType | RestrictedPrimitiveType
;

RestrictedPrimitiveType:
  RangedNumber | EnumRestrictedNumber | RegexpRestrictedString | EnumRestrictedString
;

RangedNumber:
  typename=NUMBER_LITERAL '(' from=EInt '..' to=EInt ')'
;

RegexpRestrictedString:
  typename=STRING_LITERAL regexp=REGEX
;

EnumRestrictedNumber:
  typename=NUMBER_LITERAL 'in' '(' enumVals+=EInt (',' enumVals+=EInt )* ')'
;

EnumRestrictedString:
  typename=STRING_LITERAL 'in' '(' enumVals+=STRING (',' enumVals+=STRING )* ')'
;

UnrestrictedPrimitiveType:
  typename=( STRING_LITERAL | NUMBER_LITERAL | 'Boolean' | 'Bool' | 'Identifier' | 'Timestamp' )
;

NUMBER_LITERAL:
  'Integer' | 'Int' | 'Number' | 'Float' | 'Double'
;

STRING_LITERAL:
  'String'
;

EInt returns ecore::EInt:
  '-'? INT
;

VersionId returns ecore::EDouble:
  INT '.' INT
;

ValidId:
  ID | KEYWORD
;

KEYWORD: 'schema' | 'import' | 'struct' | 'root' | 'entity' | 'relationship' | 'common' | 'variation' | 'U' | 'I' | 'ref' | 'feat' | 'as' | 'aggr' |
         'Null' | 'Option' | 'List' | 'Set' | 'Map' | 'Tuple' | 'in' | 'Boolean' | 'Bool' | 'Identifier' | 'Timestamp' | 'Integer' | 'Int' | 'Number' |
         'Float' | 'Double' | 'String' | 'sql' | 'create' | 'temporary' | 'table' | 'if' | 'not' | 'exists' | 'constraint' | 'foreign' | 'key' |
         'references' | 'unique' | 'primary' | 'TINYINT' | 'SMALLINT' | 'DEC' | 'FIXED' | 'DECIMAL' | 'NUMERIC' | 'BIT' | 'REAL' | 'PRECISION' |
         'DATE' | 'TIME' | 'DATETIME' | 'YEAR' | 'CHAR' | 'VARCHAR' | 'BINARY' | 'VARBINARY' | 'BLOB' | 'TEXT'
;

terminal REGEX:
  '/' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\'|'\/' */ | !('\\'|'/') )* '/'
;

////////END QUALIFIED NAMES AND PRIMITIVES////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////SQL DDL////////////////////////////////////////////////////////////////////////

SQLStructure:
  'SQL' 'CREATE' ( 'TEMPORARY' )? 'TABLE' ( 'IF' 'NOT' 'EXISTS' )? ( name=ValidId )? '(' definitions+=SQLDefinition ( ',' definitions+=SQLDefinition )* ')' ';'
;

SQLDefinition:
  SQLColumnDefinition | SQLConstraintDefinition
;

SQLColumnDefinition:
  name=ValidId type=SQLType ( '(' EInt ( ',' EInt )? ')' )? ( constraint=SQL_CONSTRAINT_DEFINITION_LITERAL )? ( refs=SQLReferenceTarget )?
;

SQLConstraintDefinition:
  SQLPrimaryConstraintDefinition | SQLForeignConstraintDefinition | SQLUniqueConstraintDefinition
;

// Writing references here instead of colNames+=ValidId makes up for A LOT of troubles. Consider yourself warned.
SQLPrimaryConstraintDefinition:
  ( 'CONSTRAINT' ( name=ValidId )? )? 'PRIMARY' 'KEY' '(' colNames+=ValidId ( ',' colNames+=ValidId )* ')'
;

SQLForeignConstraintDefinition:
  ( 'CONSTRAINT' ( name=ValidId )? )? 'FOREIGN' 'KEY' ValidId? '(' colNames+=ValidId ( ',' colNames+=ValidId )* ')' refs=SQLReferenceTarget
;

SQLUniqueConstraintDefinition:
  ( 'CONSTRAINT' ( name=ValidId )? )? 'UNIQUE' 'KEY' ValidId? '(' colNames+=ValidId ( ',' colNames+=ValidId )* ')'
;

SQLReferenceTarget:
  'REFERENCES' ref=[EntityDecl|QualifiedEntityName] '(' colNames+=ValidId ( ',' colNames+=ValidId )* ')'
;

SQLType:
  typename=( SQL_BOOLEAN_LITERAL | SQL_NUMBER_LITERAL | SQL_DOUBLE_LITERAL | SQL_TIMESTAMP_LITERAL | SQL_STRING_LITERAL )
;

SQL_BOOLEAN_LITERAL:
  'TINYINT' | 'BOOLEAN' | 'BOOL'
;

SQL_NUMBER_LITERAL:
  'INT' | 'INTEGER' | 'SMALLINT' | 'MEDIUMINT' | 'DEC' | 'FIXED' | 'DECIMAL' | 'NUMERIC' | 'BIT'
;

SQL_DOUBLE_LITERAL:
  'FLOAT' | 'REAL' | 'DOUBLE' 'PRECISION' | 'DOUBLE'
;

SQL_TIMESTAMP_LITERAL:
  'DATE' | 'TIME' | 'DATETIME' | 'TIMESTAMP' | 'YEAR'
;

SQL_STRING_LITERAL:
  'CHAR' | 'VARCHAR' | 'BINARY' | 'VARBINARY' | 'BLOB' | 'TEXT'
;

SQL_CONSTRAINT_DEFINITION_LITERAL:
  ( SQL_PRIMARY_KEY_LITERAL | SQL_UNIQUE_LITERAL | SQL_NULL_LITERAL )
;

SQL_PRIMARY_KEY_LITERAL:
  'PRIMARY' 'KEY'
;

SQL_UNIQUE_LITERAL:
  'UNIQUE' 'KEY'
;

SQL_NULL_LITERAL:
  'NOT'? 'NULL'
;

/////////////////END SQL DDL//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
