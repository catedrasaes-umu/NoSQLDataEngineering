grammar es.um.unosql.xtext.orion.Orion with es.um.unosql.xtext.athena.Athena

generate orion "http://www.um.es/unosql/xtext/orion/Orion"
import "http://www.um.es/unosql/xtext/athena/Athena" as athena
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

OrionOperations:
  name=ValidId 'operations'
  ( 'using' imports=Import )?
  ( operations+=BasicOperation+ | evolBlocks+=EvolBlock+ )
;

EvolBlock:
  'EBlock' name=INT
  '{'
    ( operations+=BasicOperation )+
  '}'
;

BasicOperation:
  EntityOp | FeatureOp | AttributeOp | ReferenceOp | AggregateOp
;

EntityOp:
  EntityAddOp | EntityDeleteOp | EntityRenameOp | EntitySplitOp | EntityMergeOp | EntityExtractOp | EntityDelVarOp | EntityAdaptOp | EntityUnionOp
;

FeatureOp:
  FeatureDeleteOp | FeatureRenameOp | FeatureCopyOp | FeatureMoveOp | FeatureNestOp | FeatureUnnestOp
;

AttributeOp:
  AttributeAddOp | AttributeCastOp | AttributePromoteOp | AttributeDemoteOp
;

ReferenceOp:
  ReferenceAddOp | ReferenceCastOp | ReferenceCardinalityOp | ReferenceMorphOp
;

AggregateOp:
  AggregateAddOp | AggregateCardinalityOp | AggregateMorphOp
;

// MongoDB: CreateCollection. UpdateMany(AddFields).
// Cassandra: CreateTable. InsertInto(AddFields).
EntityAddOp:            'ADD'     'ENTITY' spec=EntityAdd       ;
// MongoDB: Drop.
// Cassandra: DropTable.
EntityDeleteOp:         'DELETE'  'ENTITY' spec=EntityDel       ;
// MongoDB: RenameCollection.
// Cassandra: CopyTo. DropTable. CreateTable. CopyFrom.
EntityRenameOp:         'RENAME'  'ENTITY' spec=EntityRename    ;
// MongoDB: 2x Aggregate(Project, Out). Drop.
// Cassandra: CopyTo. CreateTable. CopyFrom. CopyTo. CreateTable. CopyFrom. DropTable.
EntitySplitOp:          'SPLIT'   'ENTITY' spec=EntitySplit     ;
// MongoDB: Aggregate(Project, Out).
// Cassandra: CopyTo. CreateTable. CopyFrom.
EntityExtractOp:        'EXTRACT' 'ENTITY' spec=EntityExtract   ;
// MongoDB: 2x Aggregate(Merge). 2x Drop.
// Cassandra: CreateTable. 2x CopyTo. 2x CopyFrom. 2x DropTable.
EntityMergeOp:          'MERGE'   'ENTITY' spec=EntityMerge     ;
EntityDelVarOp:         'DELVAR'  'ENTITY' spec=EntityDelVar    ;
EntityAdaptOp:          'ADAPT'   'ENTITY' spec=EntityAdapt     ;
EntityUnionOp:          'UNION'   'ENTITY' spec=EntityUnion     ;
// MongoDB: UpdateMany(Unset).
// Cassandra: AlterTableDrop.
FeatureDeleteOp:        'DELETE'           spec=FeatureDel      ;
// MongoDB: UpdateMany(Rename).
// Cassandra: CopyTo. AlterTableDrop. AlterTableAdd. CopyFrom.
FeatureRenameOp:        'RENAME'           spec=FeatureRename   ;
// MongoDB: ForEach(UpdateMany(Set)).
// Cassandra: CopyTo. AlterTableAdd. CopyFrom.
FeatureCopyOp:          'COPY'             spec=FeatureAllocate ;
// MongoDB: ForEach(UpdateMany(Set)). UpdateMany(Unset).
// Cassandra: CopyTo. AlterTableAdd. AlterTableDrop. CopyFrom.
FeatureMoveOp:          'MOVE'             spec=FeatureAllocate ;
// MongoDB: UpdateMany(Rename).
// Cassandra: CreateType. AlterTableAdd. AlterTableDrop.  Limitation: Can't move values to the nested type.
FeatureNestOp:          'NEST'             spec=FeatureNest     ;
// MongoDB: UpdateMany(Rename).
// Cassandra: AlterTableAdd.                              Limitation: Can't move values from the nested type. Can't modify the user type according to the new aggregate.
FeatureUnnestOp:        'UNNEST'           spec=FeatureUnnest   ;
// MongoDB: UpdateMany(AddFields).
// Cassandra: AlterTableAdd.
AttributeAddOp:         'ADD'     'ATTR'   spec=AttrAdd         ;
// MongoDB: UpdateMany(AddFields, Convert).
// Cassandra: CopyTo. DropTable. CreateTable. CopyFrom.
AttributeCastOp:        'CAST'    'ATTR'   spec=AttrOrRefCast   ;
AttributePromoteOp:     'PROMOTE' 'ATTR'   spec=AttrPromote     ;
AttributeDemoteOp:      'DEMOTE'  'ATTR'   spec=AttrDemote      ;
// MongoDB: UpdateMany(AddFields).
// Cassandra: AlterTableAdd.
ReferenceAddOp:         'ADD'     'REF'    spec=RefAdd          ;
// MongoDB:UpdateMany(AddFields, Convert).
// Cassandra: CopyTo. DropTable. CreateTable. CopyFrom.
ReferenceCastOp:        'CAST'    'REF'    spec=AttrOrRefCast   ;
// MongoDB: UpdateMany(AddFields).
// Cassandra: CopyTo. DropTable. CreateTable. CopyFrom.
ReferenceCardinalityOp: 'CARD'    'REF'    spec=RefOrAggrCard   ;
// MongoDB: Aggregate(Lookup, AddFields, Out). UpdateMany(Unset). Drop.
// Cassandra: CreateType. AlterTableAdd. DropTable.       Limitation: Can't move values to the User-defined type.
ReferenceMorphOp:       'MORPH'   'REF'    spec=RefMorph        ;
// MongoDB: UpdateMany(AddFields).
// Cassandra: CreateType. AlterTableAdd.
AggregateAddOp:         'ADD'     'AGGR'   spec=AggrAdd         ;
// MongoDB: UpdateMany(AddFields).
// Cassandra: CopyTo. DropTable. CreateTable. CopyFrom.
AggregateCardinalityOp: 'CARD'    'AGGR'   spec=RefOrAggrCard   ;
// MongoDB: ForEach(Insert, UpdateMany(Set)). InsertMany. UpdateMany(Set).
// Cassandra: CreateTable. AlterTableAdd.                 Limitation: Can't move values from the User-defined type to the new table.
AggregateMorphOp:       'MORPH'   'AGGR'   spec=AggrMorph       ;
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////// Entity operations ///////////////////////

EntityAdd:
  name=ValidId ( '{' features+=SimpleDataFeature (',' features+=SimpleDataFeature )* '}' )?
;

EntityDel:
  ref=ValidId
;

EntityRename:
  ref=ValidId 'TO' name=ValidId
;

EntitySplit:
  ref=ValidId 'INTO' name1=ValidId features1=SplitFeatures ',' name2=ValidId features2=SplitFeatures
;

EntityExtract:
  ref=ValidId 'INTO' name=ValidId features=SplitFeatures
;

EntityMerge:
  ref1=ValidId ',' ref2=ValidId 'INTO' name=ValidId 'WHERE' condition=ConditionDecl
;

EntityDelVar:
  ref=ValidId '::' 'v'? target=VariationIdSpec
;

EntityAdapt:
  ref=ValidId '::' 'v'? source=VariationIdSpec 'TO' 'v'? target=VariationIdSpec 
;

EntityUnion:
  ref=ValidId
;
////////////////////// Entity operations ///////////////////////
////////////////////////////////////////////////////////////////
////////////////////// Feature operations //////////////////////

FeatureDel:
  selector=FeatureSelector
;

FeatureRename:
  selector=FeatureSelector 'TO' name=QualifiedName
;

FeatureAllocate:
  sourceSelector=FeatureSelector 'TO' targetSelector=FeatureSelector 'WHERE' condition=ConditionDecl
;

FeatureNest:
  selector=FeatureSelector ( ',' features+=QualifiedName )* 'TO' name=QualifiedName
;

FeatureUnnest:
  selector=FeatureSelector ( ',' features+=QualifiedName )*
;

////////////////////// Feature operations //////////////////////
////////////////////////////////////////////////////////////////
///////////////////// Attribute operations /////////////////////

AttrAdd:
  ( key?='+' | ( ( optional?='?' )? ( unique?='!' )? ) ) selector=FeatureSelector ( ':' type=DataType ( '(' defaultValue=DefaultValue ')' )? )?
;

AttrOrRefCast:
  selector=FeatureSelector 'TO' type=PrimitiveType
;

AttrPromote:
  selector=FeatureSelector ( ',' features+=QualifiedName )*
;

AttrDemote:
  selector=FeatureSelector ( ',' features+=QualifiedName )*
;

//////////////////// Attribute operations //////////////////////
////////////////////////////////////////////////////////////////
//////////////////// Reference operations //////////////////////

RefAdd:
  ( optional?='?' )? selector=FeatureSelector  ( ':' type=PrimitiveType ( '(' defaultValue=DefaultValue ')' )? )? cardinality=('*'|'+') 'TO' ref=ValidId
;

RefOrAggrCard:
  selector=FeatureSelector 'TO' cardinality=('*'|'+')
;

RefMorph:
  selector=FeatureSelector ( '(' ( deleteId?='rmId' )? ( deleteEntity?='rmEntity' )? ')' )? 'TO' name=ValidId
;

//////////////////// Reference operations //////////////////////
////////////////////////////////////////////////////////////////
//////////////////// Aggregate operations //////////////////////

AggrAdd:
  ( optional?='?' )? selector=FeatureSelector  ':' '{' features+=SimpleDataFeature (',' features+=SimpleDataFeature )* '}' cardinality=('*'|'+') ( 'TO' name=ValidId )?
;

AggrMorph:
  selector=FeatureSelector 'TO' name=ValidId
;

//////////////////// Aggregate operations //////////////////////
////////////////////////////////////////////////////////////////
////////////////////////// Other stuff /////////////////////////

FeatureSelector:
  ( ( ref=ValidId ( '(' variations+=VariationIdSpec ( ',' variations+=VariationIdSpec )* ')' )? ) | forAll?='*' ) '::' target=QualifiedName
;

SimpleDataFeature:
  ( key?='+' | ( ( optional?='?' )? ( unique?='!' )? ) ) name=QualifiedName ( ':' type=DataType ( '(' defaultValue=DefaultValue ')' )? )?
;

SplitFeatures:
  '(' features+=QualifiedName (',' features+=QualifiedName)* ')'
;

DefaultValue:
  EString | EDouble | EInt | EBoolean
;

EDouble returns ecore::EDouble:
  '-' ? INT '.' INT
;

EString returns ecore::EString:
  STRING
;

EBoolean returns ecore::EBoolean:
  'true' | 'false'
;

ConditionDecl:
  c1=QualifiedName '=' c2=QualifiedName// Condition hierarchy ( op=('&&'|'||') '(' c3=ConditionDecl ')' )?
;

QualifiedName: ValidId ( '.' ValidId )*;

@Override
KEYWORD: 'EBlock' | 'ADD' | 'DELETE' | 'RENAME' | 'SPLIT' | 'EXTRACT' | 'MERGE' | 'COPY' | 'MOVE' | 'NEST' | 'UNNEST' |
         'ATTR' | 'CAST' | 'CARD' | 'MORPH' | 'TO' | 'INTO' | 'WHERE' | 'true' | 'false' | Athena::KEYWORD
;
