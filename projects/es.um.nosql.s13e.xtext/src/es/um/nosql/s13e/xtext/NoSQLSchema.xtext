// automatically generated by Xtext
grammar es.um.nosql.s13e.xtext.NoSQLSchema with org.eclipse.xtext.common.Terminals

import "http://www.modelum.es/NoSQLSchema" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

NoSQLSchema returns NoSQLSchema:
  {NoSQLSchema}
  'NoSQLSchema'
  name=EString
  '{'
    ('entities' '{' entities+=EntityClass ( "," entities+=EntityClass)* '}' )?
    ('refClasses' '{' refClasses+=ReferenceClass ( "," refClasses+=ReferenceClass)* '}' )?
  '}';

Classifier returns Classifier:
  EntityClass | ReferenceClass;

Property returns Property:
  Attribute | Reference | Aggregate | Null;

Type returns Type:
  PList | PrimitiveType | PMap | PSet | PTuple;

EString returns ecore::EString:
  STRING | ID;

EntityClass returns EntityClass:
  (root?='root')?
  'EntityClass'
  name=EString
  '{'
    ('parents' '(' parents+=[Classifier|EString] ( "," parents+=[Classifier|EString])* ')' )?
    'variations' '{' variations+=StructuralVariation ( "," variations+=StructuralVariation)* '}' 
  '}';

ReferenceClass returns ReferenceClass:
  'ReferenceClass'
  name=EString
  '{'
    ('parents' '(' parents+=[Classifier|EString] ( "," parents+=[Classifier|EString])* ')' )?
    'variations' '{' variations+=StructuralVariation ( "," variations+=StructuralVariation)* '}' 
  '}';

StructuralVariation returns StructuralVariation:
  'StructuralVariation'
  '{'
    'variationId' variationId=EInt
    ('count' count=ELong)?
    ('timestamp' timestamp=ELong)?
    'properties' '{' properties+=Property ( "," properties+=Property)* '}' 
  '}';

EBoolean returns ecore::EBoolean:
  'true' | 'false';

EInt returns ecore::EInt:
  '-'? INT;

ELong returns ecore::ELong:
  '-'? INT;

Attribute returns Attribute:
  'Attribute'
  name=EString
  '{'
    'type' type=Type
  '}';

Reference returns Reference:
  'Reference'
  name=EString
  '{'
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    ('originalType' originalType=EString)?
    ('opposite' opposite=[Reference|EString])?
    'refsTo' refsTo=[EntityClass|EString]
    ('features' features=[StructuralVariation|EString])?
  '}';

Aggregate returns Aggregate:
  'Aggregate'
  name=EString
  '{'
    ('lowerBound' lowerBound=EInt)?
    ('upperBound' upperBound=EInt)?
    'aggregates' '(' aggregates+=[StructuralVariation|EString] ( "," aggregates+=[StructuralVariation|EString])* ')' 
  '}';

Null returns Null:
  {Null}
  'Null'
  name=EString;

PList returns PList:
  {PList}
  'PList'
  '{'
    ('elementType' elementType=Type)?
  '}';

PrimitiveType returns PrimitiveType:
  {PrimitiveType}
  'PrimitiveType'
  name=EString;

PMap returns PMap:
  {PMap}
  'PMap'
  '{'
    ('keyType' keyType=PrimitiveType)?
    ('valueType' valueType=Type)?
  '}';

PSet returns PSet:
  {PSet}
  'PSet'
  '{'
    ('elementType' elementType=Type)?
  '}';

PTuple returns PTuple:
  {PTuple}
  'PTuple'
  '{'
    ('elements' '{' elements+=Type ( "," elements+=Type)* '}' )?
  '}';
