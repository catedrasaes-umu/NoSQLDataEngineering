grammar es.um.nosql.s13e.xtext.NoSQLSchema with org.eclipse.xtext.common.Terminals

import "http://www.modelum.es/NoSQLSchema" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

NoSQLSchema returns NoSQLSchema:
  {NoSQLSchema}
  'NoSQLSchema' name=EString
  '{'
    (entities+=EntityClass ( "," entities+=EntityClass)* )?
    (refClasses+=ReferenceClass ( "," refClasses+=ReferenceClass)* )?
  '}';

Classifier returns Classifier:
  EntityClass | ReferenceClass;

Property returns Property:
  Attribute | Reference | Aggregate | Null;

Type returns Type:
  PrimitiveType | PList | PSet | PMap | PTuple;

EString returns ecore::EString:
  STRING | ID;

EntityClass returns EntityClass:
  (root?='root')? 'EntityClass' name=EString
  '{'
    ('parents' '{' parents+=[Classifier|EString] ( "," parents+=[Classifier|EString])* '}' )?
    variations+=StructuralVariation ( "," variations+=StructuralVariation)* 
  '}';

ReferenceClass returns ReferenceClass:
  'ReferenceClass' name=EString
  '{'
    ('parents' '{' parents+=[Classifier|EString] ( "," parents+=[Classifier|EString])* '}' )?
    variations+=StructuralVariation ( "," variations+=StructuralVariation)*
  '}';

StructuralVariation returns StructuralVariation:
  'Variation' variationId=EInt
  '{'
    ('count' count=ELong)?
    ('timestamp' timestamp=ELong)?
    'properties' '{' properties+=Property ( "," properties+=Property)* '}' 
  '}';

EBoolean returns ecore::EBoolean:
  'true' | 'false';

EInt returns ecore::EInt:
  '-'? INT;

ELong returns ecore::ELong:
  '-'? INT;

Attribute returns Attribute:
  'Attribute' name=EString 'type' type=Type;

Reference returns Reference:
  'Reference' name=EString ('[' (lowerBound=EInt)?'..'(upperBound=EInt)? ']')?
    'refsTo' refsTo=[EntityClass|EString]
  ('{'
    ('type' originalType=EString)?
    ('opposite' opposite=[Reference|EString])?
    ('features' features=[StructuralVariation|EString])?
  '}')?;

Aggregate returns Aggregate:
  'Aggregate' name=EString ('[' (lowerBound=EInt)?'..'(upperBound=EInt)? ']')?
    'aggregates' '(' aggregates+=[StructuralVariation|EString] ( "," aggregates+=[StructuralVariation|EString])* ')' ;

Null returns Null:
  {Null}
  'Null' name=EString;

PList returns PList:
  {PList}
  'PList' ('type' elementType=Type)?;

PrimitiveType returns PrimitiveType:
  {PrimitiveType}
  'PrimitiveType' name=EString;

PMap returns PMap:
  {PMap}
  'PMap' ('key' keyType=PrimitiveType)? ('value' valueType=Type)?;

PSet returns PSet:
  {PSet}
  'PSet' ('type' elementType=Type)?;

PTuple returns PTuple:
  {PTuple}
  'PTuple' ('types' '{' elements+=Type ( "," elements+=Type)* '}' )?;
